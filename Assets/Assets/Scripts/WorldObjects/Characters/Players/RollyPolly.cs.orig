<<<<<<< local
﻿using UnityEngine;
using System.Collections;

public class RollyPolly : Player {
	protected GameObject ground;
	private float potentialEnergy, maxXVel;
	public float flatGroundPEAttenuation = 0.2f; 
	public float scalingPEAttenuation = 0.8f;
	public float maxSpeed = 60f;
	public float peStoreCeil = 20f;
	public float peMultiplier = 5f;
	private Vector2 accumulatedForce, accumulatedImpulse, velMultiplier;

	private Vector3 prevPosition;
	bool isTurningPoint = false;
	public Vector2 velocity; //FOR TESTING
	private Transform prevGround;
	public float peStore;


	public float transitionThreshold = 0.5f;
	public override void Move (float dx, float dy) {
		if (dx == 0 && rigidbody2D.velocity.magnitude < 0.3) {
			peStore = 0;
		}
		accumulatedForce = Vector2.right * moveSpeed * dx + velocityVector * peMultiplier * peStore * dx;

	}

	void LimitSpeed () {
		if (rigidbody2D.velocity.magnitude > maxSpeed) {
			rigidbody2D.velocity = rigidbody2D.velocity.normalized * maxSpeed;
		}
	}
	protected override void Update () {
		base.Update ();


		//Testing
		velocity = rigidbody2D.velocity; 
	}
	protected override void FixedUpdate () {
		SetPE ();
		rigidbody2D.AddForce (accumulatedForce);
		rigidbody2D.AddForce (accumulatedImpulse, ForceMode2D.Impulse);
		accumulatedForce = Vector2.zero;
		accumulatedImpulse = Vector2.zero;

		ground = null;
		prevPosition = transform.position;
		velocityVector = Vector3.right;
		LimitSpeed ();

	}

	protected void OnCollisionStay2D (Collision2D collision) {
		int groundLayer = LayerMask.NameToLayer ("Ground");
		if (collision.gameObject.layer == groundLayer) {
			ground = collision.gameObject;
			velocityVector = collision.transform.right.normalized;
			if (collision.transform != prevGround && collision.transform != null && prevGround != null) {
				velocityVector = PlaneAhead (rigidbody2D.velocity, collision.transform.position, velocityVector,
				                            prevGround.position, prevGround.right.normalized);
				isTurningPoint = true;
			}
			prevGround = collision.transform;
		}

	}

	void AddAccumulatedImpulse (float dx) {
		if (peStore > 0) {
			accumulatedImpulse = velocityVector * peMultiplier * Mathf.Min (peStore, peStoreCeil) * dx;
			Debug.Log ("Impulse is " + accumulatedImpulse);
		}
	}


	Vector3 PlaneAhead (Vector3 movement, Vector3 planeAPos, Vector3 planeARight, Vector3 planeBPos, Vector3 planeBRight) {
		if (movement.x > 0) {
			if (planeAPos.x > planeBPos.x) {
				return planeARight;
			} else {
				return planeBRight;
			}
		} else {
			if (planeAPos.x < planeBPos.x) {
				return planeARight;
			} else {
				return planeBRight;
			}
		}
	}
	void SetPE () {
		float prevY = prevPosition.y;
		if (prevY - transform.position.y > 0) {
			peStore += prevY - transform.position.y;
		} else if (prevY == transform.position.y) {
			peStore -= flatGroundPEAttenuation * Time.deltaTime;
		} else {
			peStore -= scalingPEAttenuation * Time.deltaTime;
		}
		peStore = Mathf.Max (peStore, 0);
		peStore = Mathf.Min (peStore, peStoreCeil);
	}

}
=======
﻿using UnityEngine;
using System.Collections;

public class RollyPolly : Player {
	protected GameObject ground;
	private float potentialEnergy, maxXVel;
	private Vector2 accumulatedForce, accumulatedImpulse;
	public Vector2 velocity; //FOR TESTING
	private Vector2 prevGround;


	public float transitionThreshold = 0.5f;
	public override void Move (float dx, float dy) {
		accumulatedForce = dx * moveSpeed * Vector3.right;
		//accumulatedForce = velocityVector * moveSpeed * dx;

	}

	protected override void Update () {
		base.Update ();
		ground = null;
		velocityVector = Vector3.right;
		//Testing
		velocity = rigidbody2D.velocity; 
	}
	protected override void FixedUpdate () {
		rigidbody2D.AddForce (accumulatedForce);
		rigidbody2D.AddForce (accumulatedImpulse, ForceMode2D.Impulse);
		accumulatedForce = Vector3.zero;
		accumulatedImpulse = Vector3.zero;
	}

	protected override void OnCollisionStay2D (Collision2D collision) {
		int groundLayer = LayerMask.NameToLayer ("Ground");
		if (collision.gameObject.layer == groundLayer) {
			ground = collision.gameObject;
			velocityVector = collision.transform.right.normalized;
			if (velocityVector != prevGround) {
				AdjustVelocity ();
			}
			prevGround = velocityVector;
		}

	}

	public void AdjustVelocity () {
//		Debug.Log ("hi");
//		Vector2 compensatedVel = new Vector2 (rigidbody2D.velocity.magnitude * SignOfNo (rigidbody2D.velocity.x), rigidbody2D.velocity.y);
		accumulatedImpulse = new Vector2 (rigidbody2D.velocity.magnitude * SignOfNo (rigidbody2D.velocity.x), rigidbody2D.velocity.y);
		//rigidbody2D.velocity = compensatedVel;

	}

	static int SignOfNo (float n) {
		if (n < 0) {
			return -1;
		} else if (n > 0) {
			return 1;
		} else {
			return 0;
		}
	} 

//	Vector3 PlaneAhead (Vector3 movement, Vector3 planeAPos, Vector3 planeARight, Vector3 planeBPos, Vector3 planeBRight) {
//
//	}
	void ResetEnergy () {
		maxXVel = 0;
	}
	void SetEnergy (float dx) {
//		if (prevTransform.y > transform.position.y) {
//			potentialEnergy = rigidbody2D.mass * rigidbody2D.gravityScale * (prevTransform.y - transform.position.y)
//				+ velocityVector * moveSpeed * dx;
//		}

	}
}
>>>>>>> other
